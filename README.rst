PyRelease -Alpha
================

A simple single file package builder. Automatically creates all the files
required for a basic PyPi package and uploads to either the test or the
regular PyPi servers.

*Tested on Python 3.6. and Python 2.7*

**Features**

 - Automatic readme creation
 - Automatic entry-point script creation
 - Automatic setup.py file creation
 - Automatic creation of package wheels and binaries
 - Uploads to PyPi *main* server OR *testing* server
 - Automatically detects and includes data folder
 - Automatic pydoc, API documentation creation
 - Build steps are split into many stages allowing for
 - Preview you README.rst in rest view before commiting hooks at almost any point of the build.
 - Adds MIT license automatically (soon to be more)

This doesn't cover everything, check out the code if you want to see more.

Note: As of right now builds don't clean up after themselves, so you may
have to clean up any old ones yourself. They have a random name and will be
in the same folder as the package you're attempting to build.

Development
-----------

**Install**

Download Package from git hub and unzip into a directory and open up a
terminal. From the same directory that you unzipped the files run

    $ pip install -e . --user

This will install pyrelease in "editable" mode and any changes you make
to the source code will be reflected when you run the pyrelease. This way
you can work on and modify the code without having to rebuild and install
pyrelease everytime you modify the code.

**Note:** To be able to upload to the PyPi server and test server you must
have a ~/.pypirc file with these sections::

    [distutils]
    index-servers=
        pypi
        testpypi

    [testpypi]
    repository = https://testpypi.python.org/pypi
    username = *Test PyPi Username*     # Enter your PyPi Test Site username here

    [pypi]
    repository = https://pypi.python.org/pypi
    username = *PyPi Username*          # Enter your PyPi username here

As of right now I'm using the `main` function in the pyrelease.py file
as an entry point. What that means is once you have installed in editable
mode you can now run `$ pyrelease [path]` from any directory and `pyrelease`
will attempt to package whatever file was pointed to by path. You can also
use other targets like "." or a directory that contains a single python
script (file) or `__init__.py` file

The way it works is during the build if the target package has a `main`
function, then it will be assumed this is a script and will be added to
the setup.py file as a console script entry point, which can then be
accessed from the command line under the same name as the project. ex: If
the package name is `mypackage` and has a `main` function in the script,
it can be run from the command line by typing `$ mypackage`, which will
run whatever was in that `main` method.

**Usage**

I have a small test package setup in `tests/my_test_package/`. To try it
out just run

    $ pyrelease trabconfig.py

from inside `tests/my_test_package/` to run a test build. The finished
files will be found in a randomly named folder in the same directory as
the file. It should include README.rst, LICENSE.md (MIT for now),
MANIFEST.in, and setup.py files as well as copied over everything in the
`data` folder (if there was one) and a docs folder with index.html file
generated by `pydoc`.

If you have any scripts you want to test on just run the same command as
above but change the path to the target file first. ie:

    $ pyrelease *target.py

Pyrelease should be non-destructive of your files but be sure to make a
backup first if you do want to test on your own scripts. (I've never lost
a file with it but I don't wanna be *that* guy, so ***make backups***)

Things to know
--------------

Pyrelease is only for single file scripts.. There are many tools available
which would be more suitable for bigger projects and therefore pyrelease
intends to do one thing and do it well, and stick to single file scripts.


Development
-----------

Most of the script is in pyrelease.py with a few shell helper functions
located in shelltools.py and the config file gathering logic found in
userdata.py (.gitconfig scraper, etc..)

There's a main function at the bottom of pyrelease.py which show how the
build flow has been broken down. Check out the `PyPackage` class, it's
what gathers and stores your package info and gets plugged into the
`Builder` class, which further breaks down the build sequence.

There is a logger available for basic info messages. And it can be channeled
to a file by uncommenting the section at the top of `pyrelease.py`

The command line interface in cli.py is a work in progress since I changed
many things around. That's where I'll be spending the most time probably.


Todo
----

Feel free to modify this to your hearts content. And if you want to help
with anything absolutely please do so, either by pull request or email,
whatever suits you.


**Documentation**
 - frontpage
 - intro
 - quickstart
 - api

**Logging**
 - info channel for all build steps
 - error messages should contain as much info as possible to help solve the problem. Include urls to documentation, etc..
 - if any user files don't parse print out a correct format (most have a \_\_str\_\_ method already, ala Remi)


**When to panic**
 - if there is a setup.py file (provide error message, only works for single files)
 - when package name already exists server sends 403 error


**Core features**
 - Auto generate License file based on scraped info from configs and/or package file(s)
 - Generate change log from git info
 - Tag and release in git
 - Get version number from Pypi (if package exists ?)
 - Support for modules contained within package (ie: /Mypackage/mypackage/\_\_init\_\_.py or /Mypackage/mypackage/mypackage.py


**Testing**
 - Make a test directory structure containing invalid build scenarios to test against.
 - Anything test related at all will be helpful
